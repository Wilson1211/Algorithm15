#include "user_cmd.h"
#include "graph.h"
#include <iostream>
#include <fstream>
#include <stdio.h>
#include "../lib/tm_usage.h"
#include <string>
#include <sstream>
using namespace std;
using namespace CommonNs;
char G[30];
extern Graph *ag;
/////////////////////////////////////////////////////////////

size_t
myStrGetTok(const string& str, string& tok, size_t pos = 0,
            const char del = ' ')
{
   size_t begin = str.find_first_not_of(del, pos);
   if (begin == string::npos) { tok = ""; return begin; }
   size_t end = str.find_first_of(del, begin);
   tok = str.substr(begin, end - begin);
   return end;
}

 Color_Graph::Color_Graph(const char * const name) : Cmd(name) {
        optMgr_.setShortDes("Color Graph");
        optMgr_.setDes("Color Graph");

        Opt *opt = new Opt(Opt::BOOL, "print usage", "");
        opt->addFlag("h");
        opt->addFlag("help");
        optMgr_.regOpt(opt);


    }
    Color_Graph::~Color_Graph(){}
    void encolor(Node* u){
        vector<Edge* >::iterator it;
        Node* node;
        int flag = 1;
        it = u->edge.begin();
        while(it!= u->edge.end()){

            node = (*it)->getNeighbor(u);
            if(flag == node->color){
                flag++;
                it = u->edge.begin();
            }else{
                it++;
            }
        }
        u->color = flag;
    }
    void Colorvisit(Node* u){
        vector<Edge*>::iterator it;
        it = (u->edge).begin();
        Node* node;
        while(it != (u->edge).end()){
            node = (*it)->getNeighbor(u);
            if(node->edge.size() == u->edge.size()){
                if(node->color == 0){
                    encolor(node);
                    Colorvisit(node);
                }
            }
            it++;
        }
        return;
    }

    bool Color_Graph::exec(int argc, char **argv){

        ag->sortNodesByDegree();
        CommonNs::TmUsage tmusg;
        CommonNs::TmStat stat;
        vector<Node *>::iterator it1;
        vector<Edge *>::iterator it2;
        int flag = 1;
        int max_color = 1;
        Node * node ;

        it1 = (ag->nodes).begin();
        while(it1 != (ag->nodes).end()){
            (*it1)->color = 0;
            it1++;
        }

        it1 = (ag->nodes).begin();
        int edgemax = (*it1)->edge.size();
        tmusg.periodStart();
        while(it1!=(ag->nodes).end()){//first check all max edges degree vertices, and color them
            //if((*it1)->edge.size() < edgemax){break;}
            if((*it1)->color != 0){it1++;continue;}
            encolor(*it1);
            Colorvisit(*it1);
            it1++;
        }
        /*flag = 1;
        it1 = (ag->nodes).begin();
        while(it1 != (ag->nodes).end()){
            if((*it1)->color ==0){
                it2 = (*it1)->edge.begin();
                while(it2 != (*it1)->edge.end()){
                    node = (*it2)->getNeighbor(*it1);
                    
                    if(flag == node->color){
                        flag++;
                        it2 = (*it1)->edge.begin();
                    }else{
                        it2++;
                    }
                }
                if(max_color < flag){max_color = flag;}
                (*it1)->color = flag;
                flag = 1;
            }
            it1++;
        }*/
    }